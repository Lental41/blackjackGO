package main

import (
	"fmt"
	"log"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// Global variables for the Telegram bot
var (
	telegramBotToken = "7728167799:AAHYfmG5ZEZgt_UJTDA4DdBpqoV9YBOvGRU" // Replace with your actual token
	games            = make(map[int64]*Game)                            // Store Game objects by chat ID
)

func main() {
	bot, err := tgbotapi.NewBotAPI(telegramBotToken)
	if err != nil {
		log.Panic(err)
	}

	bot.Debug = true
	log.Printf("Authorized on account %s", bot.Self.UserName)

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := bot.GetUpdatesChan(u)

	for update := range updates {
		if update.Message != nil {
			// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∫–æ–º–∞–Ω–¥
			log.Printf("[%s] %s", update.Message.From.UserName, update.Message.Text)

			chatID := update.Message.Chat.ID
			userID := update.Message.From.ID

			switch update.Message.Command() {
			case "start":
				handleStartCommand(bot, chatID)
			case "new_game":
				handleNewGameCommand(bot, chatID, userID)
			case "stop":
				handleStopCommand(bot, chatID, userID)
			case "test":
				handleTestCommand(bot, chatID, userID)
			case "rules":
				handleRulesCommand(bot, chatID)
			}

		} else if update.CallbackQuery != nil {
			// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback_query

			callback := update.CallbackQuery

			// –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—á–∞–µ–º Telegram, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–∫–∏ "query is too old"
			answerCallback := tgbotapi.NewCallback(callback.ID, "")
			if _, err := bot.Request(answerCallback); err != nil {
				log.Println("Failed to answer callback query:", err)
				continue // –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç update
			}

			chatID := callback.Message.Chat.ID
			userID := callback.From.ID
			messageID := callback.Message.MessageID

			switch callback.Data {
			case "start_game":
				handleStartGameCallback(bot, chatID, userID, messageID)
			case "hit":
				handleHitCallback(bot, chatID, userID, messageID)
			case "stand":
				handleStandCallback(bot, chatID, userID, messageID)
			case "split":
				handleSplitCallback(bot, chatID, userID, messageID)
			default:
				log.Printf("Unknown callback data: %s", callback.Data)
			}
		}
	}
}

// --- Command and Callback Handlers ---
func handleRulesCommand(bot *tgbotapi.BotAPI, chatID int64) {
	rulesText := `üìú –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã –≤ –ë–ª—ç–∫–¥–∂–µ–∫

–¶–µ–ª—å –∏–≥—Ä—ã ‚Äî –Ω–∞–±—Ä–∞—Ç—å 21 –æ—á–∫–æ –∏–ª–∏ –∫–∞–∫ –º–æ–∂–Ω–æ –±–ª–∏–∂–µ –∫ —ç—Ç–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é, –Ω–µ –ø—Ä–µ–≤—ã—à–∞—è –µ–≥–æ.
–ë–ª—ç–∫–¥–∂–µ–∫ ‚Äî —ç—Ç–æ 21 –æ—á–∫–æ —Å –¥–≤—É—Ö –∫–∞—Ä—Ç (—Ç—É–∑ + –∫–∞—Ä—Ç–∞ –¥–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–æ–º 10). –¢–∞–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç ‚Äî –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–±–µ–¥–∞.
–¶–µ–Ω–Ω–æ—Å—Ç—å –∫–∞—Ä—Ç:
¬†¬† ‚Ä¢ 2‚Äì10 ‚Äî –ø–æ –Ω–æ–º–∏–Ω–∞–ª—É
¬†¬† ‚Ä¢ –í–∞–ª–µ—Ç, –¥–∞–º–∞, –∫–æ—Ä–æ–ª—å ‚Äî –ø–æ 10 –æ—á–∫–æ–≤
¬†¬† ‚Ä¢ –¢—É–∑ ‚Äî 1 –∏–ª–∏ 11 –æ—á–∫–æ–≤ (—Å—á–∏—Ç–∞–µ—Ç—Å—è –∫–∞–∫ 11, –ø–æ–∫–∞ —Å—É–º–º–∞ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 21)
–ù–∞—á–∞–ª–æ –∏–≥—Ä—ã:
¬†¬† ‚Ä¢ –ò–≥—Ä–æ–∫ –∏ –¥–∏–ª–µ—Ä –ø–æ–ª—É—á–∞—é—Ç –ø–æ 2 –∫–∞—Ä—Ç—ã
¬†¬† ‚Ä¢ –û–¥–Ω–∞ –∏–∑ –∫–∞—Ä—Ç –¥–∏–ª–µ—Ä–∞ –∑–∞–∫—Ä—ã—Ç–∞
–•–æ–¥—ã –∏–≥—Ä–æ–∫–∞:
¬†¬† ‚Ä¢ –ï—â—ë –∫–∞—Ä—Ç—É ‚Äî –≤–∑—è—Ç—å –∫–∞—Ä—Ç—É
¬†¬† ‚Ä¢ –•–≤–∞—Ç–∏—Ç ‚Äî –∑–∞–∫–æ–Ω—á–∏—Ç—å —Ö–æ–¥, –ø–µ—Ä–µ–¥–∞—Ç—å –æ—á–µ—Ä–µ–¥—å –¥–∏–ª–µ—Ä—É
¬†¬† ‚Ä¢ –°–ø–ª–∏—Ç ‚Äî –¥–æ—Å—Ç—É–ø–µ–Ω –ø—Ä–∏ –¥–≤—É—Ö –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –∫–∞—Ä—Ç–∞—Ö: —Ä—É–∫–∞ –¥–µ–ª–∏—Ç—Å—è –Ω–∞ –¥–≤–µ, –∏ –∫ –∫–∞–∂–¥–æ–π –¥–æ–±–∏—Ä–∞–µ—Ç—Å—è –µ—â—ë –ø–æ –æ–¥–Ω–æ–π –∫–∞—Ä—Ç–µ. –î–∞–ª–µ–µ –æ–Ω–∏ –∏–≥—Ä–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
–•–æ–¥ –¥–∏–ª–µ—Ä–∞:
¬†¬† ‚Ä¢ –î–∏–ª–µ—Ä —Ç—è–Ω–µ—Ç –∫–∞—Ä—Ç—ã, –ø–æ–∫–∞ —Å—É–º–º–∞ –µ–≥–æ —Ä—É–∫–∏ –º–µ–Ω—å—à–µ 17
–ò—Å—Ö–æ–¥ –∏–≥—Ä—ã:
¬†¬† ‚Ä¢ –ü–æ–±–µ–∂–¥–∞–µ—Ç —Ç–æ—Ç, —É –∫–æ–≥–æ —Å—É–º–º–∞ –±–ª–∏–∂–µ –∫ 21
¬†¬† ‚Ä¢ –ü–µ—Ä–µ–±–æ—Ä (–±–æ–ª—å—à–µ 21) ‚Äî –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ—Ä–∞–∂–µ–Ω–∏–µ

–£–¥–∞—á–∏ –≤ –∏–≥—Ä–µ! üÉè`

	msg := tgbotapi.NewMessage(chatID, rulesText)
	msg.ParseMode = "Markdown"
	if _, err := bot.Send(msg); err != nil {
		log.Println("Error sending rules:", err)
	}
}
func handleStartCommand(bot *tgbotapi.BotAPI, chatID int64) {
	markup := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ù–æ–≤–∞—è –∏–≥—Ä–∞", "start_game"),
		),
	)

	msg := tgbotapi.NewMessage(chatID, "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É")
	msg.ReplyMarkup = markup

	if _, err := bot.Send(msg); err != nil {
		log.Println(err)
	}
}

func handleNewGameCommand(bot *tgbotapi.BotAPI, chatID int64, userID int64) {
	if _, ok := games[chatID]; !ok {
		msg := tgbotapi.NewMessage(chatID, "–ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è...")
		if _, err := bot.Send(msg); err != nil {
			log.Println(err)
		}
		newGame(bot, chatID, userID)
	} else {
		msg := tgbotapi.NewMessage(chatID, "–ò–≥—Ä–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞")
		if _, err := bot.Send(msg); err != nil {
			log.Println(err)
		}
	}
}

func handleStopCommand(bot *tgbotapi.BotAPI, chatID int64, userID int64) {
	end(bot, chatID, userID, "stop")
}

func handleTestCommand(bot *tgbotapi.BotAPI, chatID int64, userID int64) {
	player := NewPlayer(userID)
	game := NewGame([]*Player{player})
	game.Start()
	game.Players[userID].Hands[0].Cards[0] = NewCard(51)
	game.Players[userID].Hands[0].Cards[1] = NewCard(51)
	games[chatID] = game

	markup := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ï—â–µ –∫–∞—Ä—Ç—É", "hit"),
			tgbotapi.NewInlineKeyboardButtonData("–°–ø–ª–∏—Ç", "split"),
			tgbotapi.NewInlineKeyboardButtonData("–•–≤–∞—Ç–∏—Ç", "stand"),
		),
	)

	msg := tgbotapi.NewMessage(chatID, fmt.Sprintf(
		"–ö–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞:  *%s  [ ? ]*\n\n–í–∞—à–∏ –∫–∞—Ä—Ç—ã:  *%s*, —Å—É–º–º–∞ –æ—á–∫–æ–≤: *%d*",
		game.Dealer.CurrentHand.Show(),
		game.Players[userID].CurrentHand.Show(),
		game.Players[userID].CurrentHand.GetValue(),
	))
	msg.ParseMode = tgbotapi.ModeMarkdown
	msg.ReplyMarkup = markup

	if _, err := bot.Send(msg); err != nil {
		log.Println(err)
	}
}

func handleStartGameCallback(bot *tgbotapi.BotAPI, chatID int64, userID int64, messageID int) {
	editMarkup := tgbotapi.NewEditMessageReplyMarkup(chatID, messageID, tgbotapi.InlineKeyboardMarkup{InlineKeyboard: [][]tgbotapi.InlineKeyboardButton{}})
	if _, err := bot.Send(editMarkup); err != nil {
		log.Println(err)
	}
	msg := tgbotapi.NewMessage(chatID, "–ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è...")
	if _, err := bot.Send(msg); err != nil {
		log.Println(err)
	}

	if _, ok := games[chatID]; !ok {
		newGame(bot, chatID, userID)
	} else {
		msg := tgbotapi.NewMessage(chatID, "–ò–≥—Ä–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞")
		if _, err := bot.Send(msg); err != nil {
			log.Println(err)
		}
	}
}

func handleHitCallback(bot *tgbotapi.BotAPI, chatID int64, userID int64, messageID int) {
	emptyMarkup := tgbotapi.NewEditMessageReplyMarkup(chatID, messageID, tgbotapi.InlineKeyboardMarkup{InlineKeyboard: [][]tgbotapi.InlineKeyboardButton{}})
	if _, err := bot.Send(emptyMarkup); err != nil {
		log.Println(err)
	}

	hit(bot, chatID, userID)
}

func handleStandCallback(bot *tgbotapi.BotAPI, chatID int64, userID int64, messageID int) {
	editMarkup := tgbotapi.NewEditMessageReplyMarkup(chatID, messageID, tgbotapi.InlineKeyboardMarkup{InlineKeyboard: [][]tgbotapi.InlineKeyboardButton{}})
	if _, err := bot.Send(editMarkup); err != nil {
		log.Println(err)
	}
	stand(bot, chatID, userID)
}

func handleSplitCallback(bot *tgbotapi.BotAPI, chatID int64, userID int64, messageID int) {
	editMarkup := tgbotapi.NewEditMessageReplyMarkup(chatID, messageID, tgbotapi.InlineKeyboardMarkup{InlineKeyboard: [][]tgbotapi.InlineKeyboardButton{}})
	if _, err := bot.Send(editMarkup); err != nil {
		log.Println(err)
	}
	split(bot, chatID, userID)
}

// --- Game Logic Functions ---

func newGame(bot *tgbotapi.BotAPI, chatID int64, userID int64) {
	player := NewPlayer(userID)
	game := NewGame([]*Player{player})
	game.Start()
	games[chatID] = game

	hitButton := tgbotapi.NewInlineKeyboardButtonData("–ï—â–µ –∫–∞—Ä—Ç—É", "hit")
	standButton := tgbotapi.NewInlineKeyboardButtonData("–•–≤–∞—Ç–∏—Ç", "stand")
	splitButton := tgbotapi.NewInlineKeyboardButtonData("–°–ø–ª–∏—Ç", "split")
	var markup tgbotapi.InlineKeyboardMarkup

	if player.CurrentHand.IsBlackjack() {
		end(bot, chatID, userID, "blackjack")
		return
	}

	if player.CurrentHand.CanSplit() {
		markup = tgbotapi.NewInlineKeyboardMarkup(tgbotapi.NewInlineKeyboardRow(hitButton, splitButton, standButton))
	} else {
		markup = tgbotapi.NewInlineKeyboardMarkup(tgbotapi.NewInlineKeyboardRow(hitButton, standButton))
	}

	msg := tgbotapi.NewMessage(chatID, fmt.Sprintf(
		"–ö–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞:  *%s  [ ? ]*\n\n–í–∞—à–∏ –∫–∞—Ä—Ç—ã:  *%s*, —Å—É–º–º–∞ –æ—á–∫–æ–≤: *%d*",
		game.Dealer.CurrentHand.Cards[0].Show(),
		player.CurrentHand.Show(),
		player.CurrentHand.GetValue(),
	))
	msg.ParseMode = tgbotapi.ModeMarkdown
	msg.ReplyMarkup = markup

	if _, err := bot.Send(msg); err != nil {
		log.Println(err)
	}
}

func hit(bot *tgbotapi.BotAPI, chatID int64, userID int64) {
	game := games[chatID]
	player := game.Players[userID]
	player.CurrentHand.HitMe(game.Deck.Deal())

	var handLabel string
	if player.CurrentHand.IsSplited {
		if player.CurrentHand == player.Hands[0] {
			handLabel = "–ü–µ—Ä–≤–∞—è —Ä—É–∫–∞: "
		} else {
			handLabel = "–í—Ç–æ—Ä–∞—è —Ä—É–∫–∞: "
		}
	} else {
		handLabel = "–í–∞—à–∏ –∫–∞—Ä—Ç—ã: "
	}

	hitButton := tgbotapi.NewInlineKeyboardButtonData("–ï—â–µ –∫–∞—Ä—Ç—É", "hit")
	standButton := tgbotapi.NewInlineKeyboardButtonData("–•–≤–∞—Ç–∏—Ç", "stand")
	newGameButton := tgbotapi.NewInlineKeyboardButtonData("–ù–æ–≤–∞—è –∏–≥—Ä–∞", "start_game")

	markup := tgbotapi.NewInlineKeyboardMarkup(tgbotapi.NewInlineKeyboardRow(hitButton, standButton))
	markupEnd := tgbotapi.NewInlineKeyboardMarkup(tgbotapi.NewInlineKeyboardRow(newGameButton))

	if player.CurrentHand.IsSplited && player.CurrentHand == player.Hands[0] && player.CurrentHand.IsBusted() {
		msg := tgbotapi.NewMessage(chatID, fmt.Sprintf(
			"–ö–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞:  *%s  [ ? ]*\n\n%s*%s*, —Å—É–º–º–∞ –æ—á–∫–æ–≤: *%d*\n\n–£ –≤–∞—Å –ø–µ—Ä–µ–±–æ—Ä.",
			game.Dealer.CurrentHand.Cards[0].Show(),
			handLabel,
			player.CurrentHand.Show(),
			player.CurrentHand.GetValue(),
		))
		msg.ParseMode = tgbotapi.ModeMarkdown
		if _, err := bot.Send(msg); err != nil {
			log.Println(err)
		}
		player.CurrentHand = player.Hands[1]

		msg = tgbotapi.NewMessage(chatID, fmt.Sprintf(
			"–ö–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞:  *%s  [ ? ]*\n\n–í—Ç–æ—Ä–∞—è —Ä—É–∫–∞:  *%s*, —Å—É–º–º–∞ –æ—á–∫–æ–≤: *%d*",
			game.Dealer.CurrentHand.Cards[0].Show(),
			player.CurrentHand.Show(),
			player.CurrentHand.GetValue(),
		))
		msg.ParseMode = tgbotapi.ModeMarkdown
		msg.ReplyMarkup = markup
		if _, err := bot.Send(msg); err != nil {
			log.Println(err)
		}
	} else if !player.CurrentHand.IsBusted() {
		msg := tgbotapi.NewMessage(chatID, fmt.Sprintf(
			"–ö–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞:  *%s  [ ? ]*\n\n%s*%s*, —Å—É–º–º–∞ –æ—á–∫–æ–≤: *%d*",
			game.Dealer.CurrentHand.Cards[0].Show(),
			handLabel,
			player.CurrentHand.Show(),
			player.CurrentHand.GetValue(),
		))
		msg.ParseMode = tgbotapi.ModeMarkdown
		msg.ReplyMarkup = markup
		if _, err := bot.Send(msg); err != nil {
			log.Println(err)
		}
	} else if len(player.Hands) > 1 && player.CurrentHand == player.Hands[1] {
		if player.Hands[0].IsBusted() {
			end(bot, chatID, userID, "bust_both")
		} else {
			game.DealerTurn()
			for _, hand := range player.Hands {
				if (game.Dealer.CurrentHand.IsBusted() || hand.GetValue() > game.Dealer.CurrentHand.GetValue()) && !hand.IsBusted() {
					hand.Status = "–ø–æ–±–µ–¥–∞!"
				} else if hand.GetValue() == game.Dealer.CurrentHand.GetValue() && !hand.IsBusted() {
					hand.Status = "–Ω–∏—á—å—è."
				} else {
					hand.Status = "–ø—Ä–æ–∏–≥—Ä—ã—à."
				}
			}

			msg := tgbotapi.NewMessage(chatID, fmt.Sprintf(
				"–ö–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞:  *%s* , —Å—É–º–º–∞ –æ—á–∫–æ–≤: *%d*\n\n–ü–µ—Ä–≤–∞—è —Ä—É–∫–∞:  *%s*, —Å—É–º–º–∞ –æ—á–∫–æ–≤: *%d*, %s\n\n–í—Ç–æ—Ä–∞—è —Ä—É–∫–∞:  *%s*, —Å—É–º–º–∞ –æ—á–∫–æ–≤: *%d*, %s\n\n",
				game.Dealer.CurrentHand.Show(),
				game.Dealer.CurrentHand.GetValue(),
				player.Hands[0].Show(),
				player.Hands[0].GetValue(),
				player.Hands[0].Status,
				player.Hands[1].Show(),
				player.Hands[1].GetValue(),
				player.Hands[1].Status,
			))
			msg.ParseMode = tgbotapi.ModeMarkdown
			msg.ReplyMarkup = markupEnd
			if _, err := bot.Send(msg); err != nil {
				log.Println(err)
			}
		}
	} else {
		end(bot, chatID, userID, "bust")
	}
}

func split(bot *tgbotapi.BotAPI, chatID int64, userID int64) {
	game := games[chatID]
	player := game.Players[userID]
	game.Split(player)

	hitButton := tgbotapi.NewInlineKeyboardButtonData("–ï—â–µ –∫–∞—Ä—Ç—É", "hit")
	standButton := tgbotapi.NewInlineKeyboardButtonData("–•–≤–∞—Ç–∏—Ç", "stand")

	markup := tgbotapi.NewInlineKeyboardMarkup(tgbotapi.NewInlineKeyboardRow(hitButton, standButton))

	msg := tgbotapi.NewMessage(chatID, fmt.Sprintf(
		"–ö–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞:  *%s  [ ? ]*\n\n–ü–µ—Ä–≤–∞—è —Ä—É–∫–∞:  *%s*, —Å—É–º–º–∞ –æ—á–∫–æ–≤: *%d*",
		game.Dealer.CurrentHand.Cards[0].Show(),
		player.CurrentHand.Show(),
		player.CurrentHand.GetValue(),
	))
	msg.ParseMode = tgbotapi.ModeMarkdown
	msg.ReplyMarkup = markup

	if _, err := bot.Send(msg); err != nil {
		log.Println(err)
	}
}

func stand(bot *tgbotapi.BotAPI, chatID int64, userID int64) {
	game := games[chatID]
	player := game.Players[userID]

	hitButton := tgbotapi.NewInlineKeyboardButtonData("–ï—â–µ –∫–∞—Ä—Ç—É", "hit")
	standButton := tgbotapi.NewInlineKeyboardButtonData("–•–≤–∞—Ç–∏—Ç", "stand")
	newGameButton := tgbotapi.NewInlineKeyboardButtonData("–ù–æ–≤–∞—è –∏–≥—Ä–∞", "start_game")

	markupPlay := tgbotapi.NewInlineKeyboardMarkup(tgbotapi.NewInlineKeyboardRow(hitButton, standButton))
	markupEnd := tgbotapi.NewInlineKeyboardMarkup(tgbotapi.NewInlineKeyboardRow(newGameButton))

	if player.CurrentHand.IsSplited && player.CurrentHand == player.Hands[0] {
		player.CurrentHand = player.Hands[1]
		msg := tgbotapi.NewMessage(chatID, fmt.Sprintf(
			"–ö–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞:  *%s  [ ? ]*\n\n–í—Ç–æ—Ä–∞—è —Ä—É–∫–∞:  *%s*, —Å—É–º–º–∞ –æ—á–∫–æ–≤: *%d*",
			game.Dealer.CurrentHand.Cards[0].Show(),
			player.CurrentHand.Show(),
			player.CurrentHand.GetValue(),
		))
		msg.ParseMode = tgbotapi.ModeMarkdown
		msg.ReplyMarkup = markupPlay
		if _, err := bot.Send(msg); err != nil {
			log.Println(err)
		}
	} else {
		game.DealerTurn()
		if player.CurrentHand != player.Hands[0] {
			for _, hand := range player.Hands {
				if (game.Dealer.CurrentHand.IsBusted() || hand.GetValue() > game.Dealer.CurrentHand.GetValue()) && !hand.IsBusted() {
					hand.Status = "–ø–æ–±–µ–¥–∞!"
				} else if hand.GetValue() == game.Dealer.CurrentHand.GetValue() && !hand.IsBusted() {
					hand.Status = "–Ω–∏—á—å—è."
				} else {
					hand.Status = "–ø—Ä–æ–∏–≥—Ä—ã—à."
				}
			}

			msg := tgbotapi.NewMessage(chatID, fmt.Sprintf(
				"–ö–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞:  *%s* , —Å—É–º–º–∞ –æ—á–∫–æ–≤: *%d*\n\n–ü–µ—Ä–≤–∞—è —Ä—É–∫–∞:  *%s*, —Å—É–º–º–∞ –æ—á–∫–æ–≤: *%d*, %s\n\n–í—Ç–æ—Ä–∞—è —Ä—É–∫–∞:  *%s*, —Å—É–º–º–∞ –æ—á–∫–æ–≤: *%d*, %s\n\n",
				game.Dealer.CurrentHand.Show(),
				game.Dealer.CurrentHand.GetValue(),
				player.Hands[0].Show(),
				player.Hands[0].GetValue(),
				player.Hands[0].Status,
				player.Hands[1].Show(),
				player.Hands[1].GetValue(),
				player.Hands[1].Status,
			))
			msg.ParseMode = tgbotapi.ModeMarkdown
			msg.ReplyMarkup = markupEnd
			if _, err := bot.Send(msg); err != nil {
				log.Println(err)
			}
		} else if game.Dealer.CurrentHand.IsBusted() || player.CurrentHand.GetValue() > game.Dealer.CurrentHand.GetValue() {
			msg := tgbotapi.NewMessage(chatID, fmt.Sprintf(
				"–ö–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞:  *%s* , —Å—É–º–º–∞ –æ—á–∫–æ–≤: *%d*\n\n–í–∞—à–∏ –∫–∞—Ä—Ç—ã: *%s*, —Å—É–º–º–∞ –æ—á–∫–æ–≤: *%d*\n\n–ü–æ–±–µ–¥–∞!",
				game.Dealer.CurrentHand.Show(),
				game.Dealer.CurrentHand.GetValue(),
				player.CurrentHand.Show(),
				player.CurrentHand.GetValue(),
			))
			msg.ParseMode = tgbotapi.ModeMarkdown
			msg.ReplyMarkup = markupEnd
			if _, err := bot.Send(msg); err != nil {
				log.Println(err)
			}
		} else if player.CurrentHand.GetValue() == game.Dealer.CurrentHand.GetValue() {
			msg := tgbotapi.NewMessage(chatID, fmt.Sprintf(
				"–ö–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞:  *%s* , —Å—É–º–º–∞ –æ—á–∫–æ–≤: *%d*\n\n–í–∞—à–∏ –∫–∞—Ä—Ç—ã: *%s*, —Å—É–º–º–∞ –æ—á–∫–æ–≤: *%d*\n\n–ù–∏—á—å—è!",
				game.Dealer.CurrentHand.Show(),
				game.Dealer.CurrentHand.GetValue(),
				player.CurrentHand.Show(),
				player.CurrentHand.GetValue(),
			))
			msg.ParseMode = tgbotapi.ModeMarkdown
			msg.ReplyMarkup = markupEnd
			if _, err := bot.Send(msg); err != nil {
				log.Println(err)
			}
		} else {
			msg := tgbotapi.NewMessage(chatID, fmt.Sprintf(
				"–ö–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞:  *%s* , —Å—É–º–º–∞ –æ—á–∫–æ–≤: *%d*\n\n–í–∞—à–∏ –∫–∞—Ä—Ç—ã: *%s*, —Å—É–º–º–∞ –æ—á–∫–æ–≤: *%d*\n\n–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏.",
				game.Dealer.CurrentHand.Show(),
				game.Dealer.CurrentHand.GetValue(),
				player.CurrentHand.Show(),
				player.CurrentHand.GetValue(),
			))
			msg.ParseMode = tgbotapi.ModeMarkdown
			msg.ReplyMarkup = markupEnd
			if _, err := bot.Send(msg); err != nil {
				log.Println(err)
			}
		}

		delete(games, chatID)
	}
}

func end(bot *tgbotapi.BotAPI, chatID int64, userID int64, cause string) {
	game := games[chatID]
	player := game.Players[userID]

	newGameButton := tgbotapi.NewInlineKeyboardButtonData("–ù–æ–≤–∞—è –∏–≥—Ä–∞", "start_game")
	markup := tgbotapi.NewInlineKeyboardMarkup(tgbotapi.NewInlineKeyboardRow(newGameButton))
	dealerLabel := fmt.Sprintf("–ö–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞:  *%s* , —Å—É–º–º–∞ –æ—á–∫–æ–≤: *%d*\n\n", game.Dealer.CurrentHand.Show(), game.Dealer.CurrentHand.GetValue())

	var msgText string

	switch cause {
	case "blackjack":
		msgText = dealerLabel + fmt.Sprintf("–í–∞—à–∏ –∫–∞—Ä—Ç—ã:  *%s*\n\n–ü–æ–±–µ–¥–∞! –£ –≤–∞—Å –±–ª—ç–∫–¥–∂–µ–∫!", player.CurrentHand.Show())
	case "bust":
		msgText = dealerLabel + fmt.Sprintf("–í–∞—à–∏ –∫–∞—Ä—Ç—ã:  *%s*, —Å—É–º–º–∞ –æ—á–∫–æ–≤: *%d*\n\n–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏. –£ –≤–∞—Å –ø–µ—Ä–µ–±–æ—Ä.", player.CurrentHand.Show(), player.CurrentHand.GetValue())
	case "bust_both":
		msgText = dealerLabel + fmt.Sprintf("–ü–µ—Ä–≤–∞—è —Ä—É–∫–∞:  *%s*, —Å—É–º–º–∞ –æ—á–∫–æ–≤: *%d*\n\n–í—Ç–æ—Ä–∞—è —Ä—É–∫–∞:  *%s*, —Å—É–º–º–∞ –æ—á–∫–æ–≤: *%d*\n\n–û–±–µ —Ä—É–∫–∏ –ø—Ä–æ–∏–≥—Ä–∞–ª–∏. –£ –≤–∞—Å –ø–µ—Ä–µ–±–æ—Ä.",
			player.Hands[0].Show(), player.Hands[0].GetValue(), player.Hands[1].Show(), player.Hands[1].GetValue())
	case "stop":
		msgText = "–ò–≥—Ä–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
	default:
		msgText = "–í–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞"
	}

	msg := tgbotapi.NewMessage(chatID, msgText)
	msg.ParseMode = tgbotapi.ModeMarkdown
	msg.ReplyMarkup = markup

	if _, err := bot.Send(msg); err != nil {
		log.Println(err)
	}

	delete(games, chatID)
}
